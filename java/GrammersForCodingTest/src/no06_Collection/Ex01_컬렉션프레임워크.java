package no06_Collection;


public class Ex01_컬렉션프레임워크 {

	public static void main(String[] args) {
		
		// 컬렉션 : 여러 데이터를 수집해 놓은 자료구조	
			// 저장 용량(capacity) 동적 (데이터 개수 유동적이어야 할 때 유용)
				// size와는 다른 개념 (size는 실제 크기, capacity는 확보해 둔 용량 느낌)
		// 프레임워크 : 설계 원칙이 존재. 클래스와 인터페이스의 모음

		// 컬렉션 프레임워크
			// 자료구조 : 리스트, 스택, 큐, 트리 
			// 알고리즘 : 정렬, 탐색

		// 이론 디테일 보고 싶으면 https://velog.io/@jyo925/Collections-클래스

		// Collection : 루트 인터페이스
		// 메서드
//		size() // 컬렉션의 크기 반환
//		equals(Object o) // 컬렉션 비교
//		isEmpty() // 컬렉션이 비어있는지 확인
//		contains(Object o) // 해당 값이 컬렉션에 있는지 확인
//		clear() // 컬렉션에 있는 모든 요소 제거
//		remove(Object o) // 컬렉션 내에서 해당 객체 삭제
//		removeIf(Predicate<? super E> filter) // 해당 조건에 만족하는 객체 삭제
//		addAll(Collection<? extends E> c) // 지정된 컬렉션의 모든 요소를 컬렉션에 추가
//		containsAll(Collection<?> c) // 컬렉션에 지정된 컬렉션의 모든 요소가 포함되어 있는지 여부를 반환
//		removeAll(Collection<?> c) // 지정된 컬렉션에 공통으로 포함된 컬렉션의 모든 요소를 제거
//		retainAll(Collection<?> c) // 지정된 컬렉션에 공통으로 포함된 컬렉션의 요소만 유지
		
		// Colletions : Collection을 다루기 위한 클래스
		// max, min, sort(오름차순), shuffle, binarySearch, disjoint, copy, reverse 등 다양한 메서드 제


	}
}
